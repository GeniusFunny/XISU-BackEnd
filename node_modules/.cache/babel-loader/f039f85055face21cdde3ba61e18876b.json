{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nvar superAgent = require('superagent');\n\nvar cheerio = require('cheerio');\n\nvar cryptoJS = require('crypto-js');\n\nvar fetchLoginInfo = require('./API_URL').fetchLoginInfo;\n\nvar login = require('./API_URL').login;\n\nvar sleep = require('../../util/sleep').sleep;\n\nvar recordLogin = require('../db/user').login;\n\nfunction LoginDao(_x, _x2) {\n  return _LoginDao.apply(this, arguments);\n}\n\nfunction _LoginDao() {\n  _LoginDao = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(username, password) {\n    var cookie, computedPassword;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            cookie = '';\n            computedPassword = '';\n            _context.next = 4;\n            return superAgent(fetchLoginInfo).then(function (res) {\n              cookie = res.headers['set-cookie'].join(',').match(/(JSESSIONID=.+?);/)[1];\n              var $ = cheerio.load(res.text);\n              var key = $('script').last().html().slice(246, 283);\n              computedPassword = cryptoJS.enc.Hex.stringify(cryptoJS.SHA1(\"\".concat(key).concat(password)));\n            }).catch(function (err) {\n              throw new Error(err.message);\n            });\n\n          case 4:\n            _context.next = 6;\n            return sleep(500);\n\n          case 6:\n            _context.next = 8;\n            return superAgent.post(login).set('Cookie', cookie).type('form').send({\n              username: username,\n              password: computedPassword,\n              encodedPassword: '',\n              session_locale: 'zh_CN'\n            }).then(function (res) {\n              if (res.text.indexOf('密码错误') !== -1 || res.text.indexOf('账户不存在') !== -1) {\n                return {\n                  errMessage: '用户不存在或密码错误'\n                };\n              } else {\n                // recordLogin(username, password, cookie)\n                return {\n                  cookie: cookie\n                };\n              }\n            }).catch(function (err) {\n              throw new Error(err.message);\n            });\n\n          case 8:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _LoginDao.apply(this, arguments);\n}\n\nexports.LoginDao = LoginDao;","map":null,"metadata":{},"sourceType":"module"}